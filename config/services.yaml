# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
  - { resource: legacy_services.xml }
  - { resource: rule.xml }
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: ['../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}', '../src/LegacyService/Feed/Handler.php']

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/*'
    exclude: '../src/Controller/Cron/*'
    tags: [ 'controller.service_arguments' ]

  # CompilerPass dependent services
  App\LegacyService\ResultTable\Type\:
    resource: '../src/LegacyService/ResultTable/Type'
    tags: [ 'app.table_type' ]

  App\Calculator\Type\:
    resource: '../src/Calculator/Type'
    tags: [ 'app.calculator_type' ]

  app.controller.cron.feed_controller:
    class: App\Controller\Cron\FeedController
    tags: [ 'controller.service_arguments' ]
    public: true
    arguments: ['App\LegacyService\Feed\Handler']

  League\OAuth2\Client\Provider\Google:
    $options:
      clientId: '%env(OAUTH_GOOGLE_WEB_ID)%'
      clientSecret: '%env(OAUTH_GOOGLE_WEB_SECRET)%'
      redirectUri: '%env(OAUTH_GOOGLE_WEB_REDIRECT_URI)%'
      scopes: [ 'email', 'openid' ]

  App\EventSubscriber\LoginSuccessListener:
    tags:
      - name: 'kernel.event_listener'
        event: 'Symfony\Component\Security\Http\Event\LoginSuccessEvent'
        dispatcher: security.event_dispatcher.main

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
